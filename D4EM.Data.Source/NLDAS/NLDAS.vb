Imports atcData
Imports atcUtility
Imports MapWinUtility
Imports MapWinUtility.Strings
Imports D4EM.Geo
Imports D4EM.Data.MetCmp

Public Class NLDAS

    Public Class LayerSpecifications
        Public Shared GridPoints As New LayerSpecification(
            Tag:="NLDAS.GridPoints", Role:=D4EM.Data.LayerSpecification.Roles.MetStation, Source:=GetType(NLDAS))
        Public Shared GridSquares As New LayerSpecification(
            Tag:="NLDAS.GridSquares", Role:=D4EM.Data.LayerSpecification.Roles.OtherBoundary, Source:=GetType(NLDAS))
    End Class

    'Parameters available (Short_Name is used to specify)
    'PDS_IDs Short_Name Full_Name [Unit]
    '63      ACPCPsfc   Convective precipitation hourly total [kg/m^2]
    '61      APCPsfc    Precipitation hourly total [kg/m^2]
    '118     BRTMPsfc   Surface brightness temperature from GOES-UMD Pinker [K]
    '157     CAPEsfc    Convective Available Potential Energy [J/kg]
    '205     DLWRFsfc   LW radiation flux downwards (surface) [W/m^2]
    '204     DSWRFsfc   SW radiation flux downwards (surface) [W/m^2]
    '101     PARsfc     PAR Photosynthetically Active Radiation from GOES-UMD Pinker [W/m^2]
    '201     PEDASsfc   Precipitation hourly total from EDAS [kg/m^2]
    '202     PRDARsfc   Precipitation hourly total from StageII [kg/m^2]
    '1       PRESsfc    Surface pressure [Pa]
    '206     RGOESsfc   SW radiation flux downwards (surface) from GOES-UMD Pinker [W/m^2]
    '51      SPFH2m     2-m above ground Specific humidity [kg/kg]
    '11      TMP2m      2-m above ground Temperature [K]
    '33      UGRD10m    10-m above ground Zonal wind speed [m/s]
    '34      VGRD10m    10-m above ground Meridional wind speed [m/s]

    Public DefaultParameters() As String = {"APCPsfc", "PEVAPsfc", "TMP2m", "UGRD10m", "VGRD10m", "DSWRFsfc", "SPFH2m"}

    Private Const pDefaultStationsBaseFilename As String = "NLDAS_Grid"
    Private Const pDegreesPerGridCell As Double = 1 / 8
    Private Const pWestmostGridEdge As Double = -125
    Private Const pSouthmostGridEdge As Double = 25
    Private Const pWestmostGridCenter As Double = pWestmostGridEdge + pDegreesPerGridCell / 2
    Private Const pSouthmostGridCenter As Double = pSouthmostGridEdge + pDegreesPerGridCell / 2
    Private Const pMaxGridX As Integer = 463
    Private Const pMaxGridY As Integer = 223

    Private Const pFirstAvailableDate As Date = #1/1/1979 1:00:00 PM#
    Private Const pDefaultEndDate As Date = #1/1/9999#

    'Private Shared pFirstAvailableDate As New Date(1979, 1, 1, 13, 0, 0)

    Private Shared NativeProjection As DotSpatial.Projections.ProjectionInfo = Globals.GeographicProjection

    Public Class NLDASGridCoords
        Public X As Integer
        Public Y As Integer

        ''' <summary>
        ''' Create from a string formatted "X000Y000" as generated by ToString
        ''' </summary>
        ''' <remarks>also recognizes string formatted "Y000X000" for backward compatibility</remarks>
        Public Sub New(ByVal aYXString As String)
            If aYXString Is Nothing Then
                Throw New ApplicationException("NLDASGridCoords.New: Null string")
            ElseIf aYXString.Length <> 8 Then
                Throw New ApplicationException("NLDASGridCoords.New: String '" & aYXString & "' length = " & aYXString.Length & " but should be 8")
            ElseIf aYXString.StartsWith("Y") Then
                Y = Integer.Parse(aYXString.Substring(1, 3))
                X = Integer.Parse(aYXString.Substring(5))
            Else
                X = Integer.Parse(aYXString.Substring(1, 3))
                Y = Integer.Parse(aYXString.Substring(5))
            End If
        End Sub

        Public Sub New(ByVal aX As Integer, ByVal aY As Integer)
            X = aX
            Y = aY
        End Sub

        Public Overrides Function ToString() As String
            Return "X" & CStr(X).PadLeft(3, "0") & "Y" & CStr(Y).PadLeft(3, "0")
        End Function

        Public Overrides Function Equals(other As Object) As Boolean
            Return other IsNot Nothing AndAlso Me.X.Equals(other.x) AndAlso Me.Y.Equals(other.y)
        End Function

    End Class

    ''' <summary>
    ''' Calculate which NLDAS grid cells overlap aProject.Region,
    ''' Create grid boundary and center shapefiles for cells in region,
    ''' Add boundaries and centers to aProject.Layers.
    ''' </summary>
    ''' <param name="aProject">Project's Region determines grid cells that overlap</param>
    ''' <param name="aSaveFolder">Sub-folder within project folder (e.g. "NLDAS") or full path of folder to save in (e.g. "C:\NLDAS").
    '''  If nothing or empty string, will save in aProject.ProjectFolder.</param>
    ''' <returns>XML describing success or errors</returns>
    ''' <remarks></remarks>
    Public Shared Function GetLocations(ByVal aProject As Project,
                                        ByVal aSaveFolder As String) As String
        Dim lReturnValue As String = ""
        Dim lAllCells As Generic.List(Of NLDASGridCoords) = GetGridCellsInRegion(aProject.Region)
        If lAllCells.Count > 0 Then
            Dim lSaveIn As String = aProject.ProjectFolder
            If aSaveFolder IsNot Nothing AndAlso aSaveFolder.Length > 0 Then lSaveIn = IO.Path.Combine(lSaveIn, aSaveFolder)
            Dim lSaveAsBaseFileName As String = IO.Path.Combine(lSaveIn, pDefaultStationsBaseFilename)
            lReturnValue = MakeStationShapefile(aProject, lSaveAsBaseFileName & "_Center.shp", LayerSpecifications.GridPoints, lAllCells)
            lReturnValue &= MakeStationShapefile(aProject, lSaveAsBaseFileName & ".shp", LayerSpecifications.GridSquares, lAllCells)
        Else
            lReturnValue = "<error>Could not find any NLDAS coverage in selected area</error>"
        End If
        Return lReturnValue
    End Function

    ''' <summary>
    ''' Determine which NLDAS grid cell contains the specified coordinate
    ''' </summary>
    ''' <param name="lLatitude"></param>
    ''' <param name="lLongitude"></param>
    ''' <returns>Grid cell</returns>
    ''' <remarks></remarks>
    Public Shared Function GetGridCellFromLatLon(ByVal lLatitude As Double, ByVal lLongitude As Double) As NLDASGridCoords
        Dim cell As NLDASGridCoords = Nothing
        Try
            Dim lX As Integer
            Dim lY As Integer

            lX = ((lLongitude - pWestmostGridCenter) / pDegreesPerGridCell) + 1
            lY = ((lLatitude - pSouthmostGridCenter) / pDegreesPerGridCell) + 1

            cell = New NLDASGridCoords(lX, lY)

        Catch ex As Exception

        End Try

        Return cell

    End Function

    ''' <summary>
    ''' Compute which NLDAS grid cells are within the specified region
    ''' </summary>
    ''' <param name="aRegion"></param>
    ''' <returns>list of grid cell names in region</returns>
    ''' <remarks></remarks>
    Public Shared Function GetGridCellsInRegion(ByVal aRegion As Region) As Generic.List(Of NLDASGridCoords)
        Dim lAllCells As New Generic.List(Of NLDASGridCoords)
        Try
            Dim lWestLongitude As Double, lEastLongitude As Double
            Dim lNorthLatitude As Double, lSouthLatitude As Double

            aRegion.GetBounds(lNorthLatitude, lSouthLatitude, lWestLongitude, lEastLongitude, NativeProjection)

            Dim lMinX As Integer, lMaxX As Integer
            Dim lMinY As Integer, lMaxY As Integer

            'Make sure we don't find grid cells outside the grid area
            lWestLongitude = Math.Max(lWestLongitude, pWestmostGridCenter)
            'TODO: lEastLongitude = Math.Min(lEastLongitude, pEastmostGridCenter)
            lSouthLatitude = Math.Max(lSouthLatitude, pSouthmostGridCenter)
            'TODO: lNorthLatitude = Math.Min(lNorthLatitude, pNorthmostGridCenter)

            lMinX = Math.Floor((lWestLongitude - pWestmostGridCenter) / pDegreesPerGridCell)
            lMaxX = Math.Ceiling((lEastLongitude - pWestmostGridCenter) / pDegreesPerGridCell)

            lMinY = Math.Floor((lSouthLatitude - pSouthmostGridCenter) / pDegreesPerGridCell)
            lMaxY = Math.Ceiling((lNorthLatitude - pSouthmostGridCenter) / pDegreesPerGridCell)

            lMinX = Math.Max(lMinX, 0)
            lMinY = Math.Max(lMinY, 0)
            lMaxX = Math.Min(lMaxX, pMaxGridX)
            lMaxY = Math.Min(lMaxY, pMaxGridY)

            Dim lRegionGeometries As New Generic.List(Of DotSpatial.Topology.Geometry)

            lRegionGeometries.Add(aRegion.ToShape(Globals.GeographicProjection).ToGeometry)

            Dim lMustSearchShapes As Boolean = (lRegionGeometries.Count > 0)
            Dim lOverlaps As Boolean = Not lMustSearchShapes
            For lX As Integer = lMinX To lMaxX
                For lY As Integer = lMinY To lMaxY
                    If lMustSearchShapes Then
                        lOverlaps = False
                        Dim lGridGeometry As DotSpatial.Topology.Geometry = CreateGridSquare(New NLDASGridCoords(lX, lY)).ToGeometry
                        For Each lHucGeometry As DotSpatial.Topology.Geometry In lRegionGeometries
                            If lHucGeometry.Intersects(lGridGeometry) Then
                                lOverlaps = True
                                Exit For
                            End If
                        Next
                    End If
                    If lOverlaps Then lAllCells.Add(New NLDASGridCoords(lX, lY))
                Next
            Next

        Catch e As Exception
            Logger.Dbg("Exception in NLDASDataExtension.GetGridCellsInRegion: " & e.Message)
        End Try
        Return lAllCells
    End Function

    Private Shared Function CreateGridSquare(ByVal aGrid As NLDASGridCoords,
                                    Optional ByVal aTargetProjection As DotSpatial.Projections.ProjectionInfo = Nothing) As DotSpatial.Data.Shape

        Dim lCoordinates As New Generic.List(Of DotSpatial.Topology.Coordinate)
        Dim lSouthwestLatLon As New DotSpatial.Topology.Coordinate(pWestmostGridEdge + aGrid.X * pDegreesPerGridCell,
                                                                   pSouthmostGridEdge + aGrid.Y * pDegreesPerGridCell)

        Dim lNextPoint As New DotSpatial.Topology.Coordinate(lSouthwestLatLon.X,
                                                             lSouthwestLatLon.Y)
        lCoordinates.Add(lNextPoint)

        lNextPoint = New DotSpatial.Topology.Coordinate(lSouthwestLatLon.X,
                                                        lSouthwestLatLon.Y + pDegreesPerGridCell)
        lCoordinates.Add(lNextPoint)

        lNextPoint = New DotSpatial.Topology.Coordinate(lSouthwestLatLon.X + pDegreesPerGridCell,
                                                        lSouthwestLatLon.Y + pDegreesPerGridCell)
        lCoordinates.Add(lNextPoint)

        lNextPoint = New DotSpatial.Topology.Coordinate(lSouthwestLatLon.X + pDegreesPerGridCell,
                                                        lSouthwestLatLon.Y)
        lCoordinates.Add(lNextPoint)

        lCoordinates.Add(lSouthwestLatLon) 'Close the polygon

        Dim lShape As New DotSpatial.Data.Shape(DotSpatial.Topology.FeatureType.Polygon)
        lShape.AddPart(lCoordinates, DotSpatial.Data.CoordinateType.Regular)

        If aTargetProjection IsNot Nothing AndAlso Not (aTargetProjection.Equals(Globals.GeographicProjection)) Then
            DotSpatial.Projections.Reproject.ReprojectPoints(lShape.Vertices, lShape.Z, Globals.GeographicProjection, aTargetProjection, 0, 5)
        End If

        Return lShape
    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="aProject">Project containing desired projection. New layer will be added to aProject.Layers</param>
    ''' <param name="aSaveAs">Shape File Name</param>
    ''' <param name="aLayerType">Which layer to make: GridPoints or GridSquares (defined in LayerSpecifications)</param>
    ''' <param name="aAllCells">List of cells to include in shapefile</param>
    ''' <returns>XML string describing shapefile added or error message</returns>
    Public Shared Function MakeStationShapefile(ByVal aProject As Project,
                                                ByVal aSaveAs As String,
                                                ByVal aLayerType As LayerSpecification,
                                                ByVal aAllCells As Generic.List(Of NLDASGridCoords)) As String
        Dim lResult As String = ""

        If IO.File.Exists(aSaveAs) Then
            Try
                'atcMwGisUtility.GisUtil.RemoveLayer(atcMwGisUtility.GisUtil.LayerIndex(aSaveAs))
            Catch 'Ignore exception if layer was not on map
            End Try
            TryDeleteShapefile(aSaveAs)
        End If

        MkDirPath(PathNameOnly(aSaveAs))

        Dim lFeatureSet As DotSpatial.Data.FeatureSet
        If aLayerType = LayerSpecifications.GridPoints Then
            lFeatureSet = New DotSpatial.Data.FeatureSet(DotSpatial.Topology.FeatureType.Point)
        Else
            lFeatureSet = New DotSpatial.Data.FeatureSet(DotSpatial.Topology.FeatureType.Polygon)
        End If
        lFeatureSet.Projection = Globals.GeographicProjection

        Dim lNewField As New DotSpatial.Data.Field("LOCATION", DotSpatial.Data.FieldDataType.String)
        lNewField.Length = 8
        lFeatureSet.DataTable.Columns.Add(lNewField)

        Dim lShapeIndex As Integer = -1

        For Each lGrid As NLDASGridCoords In aAllCells
            Dim lFeature As DotSpatial.Data.IFeature
            If aLayerType = LayerSpecifications.GridPoints Then
                Dim lX As Double = pWestmostGridCenter + lGrid.X * pDegreesPerGridCell
                Dim lY As Double = pSouthmostGridCenter + lGrid.Y * pDegreesPerGridCell
                Dim lCoordinate As New DotSpatial.Topology.Coordinate(lX, lY)
                Dim lPoint As New DotSpatial.Topology.Point(lCoordinate)
                lFeature = lFeatureSet.AddFeature(lPoint)
            Else
                lFeature = lFeatureSet.AddFeature(CreateGridSquare(lGrid).ToGeometry)
            End If
            lShapeIndex += 1
            lFeature.DataRow(0) = lGrid.ToString
        Next
        lFeatureSet.UpdateExtent()
        lFeatureSet.Filename = aSaveAs
        lFeatureSet.Save()

        Dim lNewLayer As New Layer(lFeatureSet, aLayerType)
        lNewLayer.Reproject(aProject.DesiredProjection)

        If IO.File.Exists(aSaveAs) Then
            lResult = "<add_shape>" & aSaveAs & "</add_shape>" & vbCrLf
            'Adding layer with features already populated should work, but newly created
            ' shapefiles have some trouble so we add by filename and let it get read fresh from disk later
            'aProject.Layers.Add(lNewLayer) 
            lFeatureSet.Close()
            lFeatureSet.Dispose()
            aProject.Layers.Add(New Layer(aSaveAs, aLayerType, False))
        Else
            lResult = "No shape file created for '" & aSaveAs & "'"
            Logger.Dbg(lResult)
        End If
        Return lResult
    End Function

    ''' <summary>
    ''' Get data from NLDAS for the given cells
    ''' </summary>
    ''' <param name="aProject">Project folder and cache settings</param>
    ''' <param name="aSaveFolder">Sub-folder within project folder (e.g. "NLDAS") or full path of folder to save in (e.g. "C:\NLDAS").
    '''  If nothing or empty string, will save in aProject.ProjectFolder.</param>
    ''' <param name="aCells">NLDAS cells to get data for</param>
    ''' <param name="aDataType">Parameter name, eg "APCPsfc"</param>
    ''' <param name="aStartDate">Earliest time to get a value from, defaults to start of NLDAS data</param>
    ''' <param name="aEndDate">Latest time to get a value from, defaults to yesterday</param>
    ''' <param name="aWDMFilename">If specified, data will be saved in a WDM file</param>
    ''' <param name="aTimeZoneShift">If specified, data will be shifted this number of hours to account for difference from UTC</param>
    ''' <returns>XML string describing what happened</returns>
    ''' <remarks></remarks>
    Public Shared Function GetParameter(ByVal aProject As Project,
                                        ByVal aSaveFolder As String,
                                        ByVal aCells As Generic.List(Of NLDASGridCoords),
                               Optional ByVal aDataType As String = "APCPsfc",
                               Optional ByVal aStartDate As Date = pFirstAvailableDate,
                               Optional ByVal aEndDate As Date = pDefaultEndDate,
                               Optional ByVal aWDMFilename As String = "",
                               Optional ByVal aTimeZoneShift As Integer = 0) As String
        Dim lResults As String = ""

        If aCells Is Nothing OrElse aCells.Count = 0 Then
            Return "<error>Could not find any NLDAS cells, unable to download data</error>"
        End If

        Select Case aDataType.ToLower
            Case "apcpsfc"
                aDataType = "APCPsfc"

            Case Else
                'Return "<error>Unsupported NLDAS data type '" & aDataType & "'</error>"
        End Select

        If aStartDate < pFirstAvailableDate Then aStartDate = pFirstAvailableDate
        'Currently only asking for data up to ten days ago which should be safe.
        'TODO: ask for more recent data and parse error message to determine latest time available
        Dim lDefaultEndDate As Date = Now.AddDays(-10)
        lDefaultEndDate = New Date(lDefaultEndDate.Year, lDefaultEndDate.Month, lDefaultEndDate.Day, 0, 0, 0)
        If aEndDate > lDefaultEndDate Then
            aEndDate = lDefaultEndDate
        End If

        Dim lSaveIn As String = aProject.ProjectFolder
        If aSaveFolder IsNot Nothing AndAlso aSaveFolder.Length > 0 Then lSaveIn = IO.Path.Combine(lSaveIn, aSaveFolder)
        IO.Directory.CreateDirectory(lSaveIn)

        Dim lCacheFolder As String = aProject.CacheFolder.Clone
        If Not lCacheFolder.ToLower.Contains("nldas") Then lCacheFolder = IO.Path.Combine(lCacheFolder, "nldas")

        'Dim lSaveAsBase As String = lSaveIn
        'If lSaveAsBase.Length = 0 OrElse IO.Directory.Exists(lSaveAsBase) Then
        '    lSaveAsBase = IO.Path.Combine(lSaveAsBase, "NLDAS_")
        'End If

        Dim lWDM As atcWDM.atcDataSourceWDM = Nothing
        Dim lNextDestinationDSN As Integer = 1
        If Not String.IsNullOrEmpty(aWDMFilename) Then
            'TODO: eliminate potential for atcDataManager.DataSources to be different from Project.TimeseriesSources 
            lWDM = aProject.TimeseriesSourceBySpecification(aWDMFilename)

            If lWDM Is Nothing Then
                lWDM = New atcWDM.atcDataSourceWDM
                If lWDM.Open(aWDMFilename) Then
                    lResults &= "<add_data type='WDM'>" & aWDMFilename & "</add_data>" & vbCrLf
                    aProject.TimeseriesSources.Add(lWDM)
                Else
                    lWDM = Nothing
                    Logger.Dbg("Unable to open WDM file '" & aWDMFilename & "' so not adding NLDAS data to it.")
                    aWDMFilename = ""
                End If
            End If
            If lWDM IsNot Nothing Then
                'If there are any existing datasets, write new data after them                
                If lWDM.DataSets.Count > 0 Then
                    Dim lLastDSN As Integer = 0
                    For Each lDataSet As atcData.atcDataSet In lWDM.DataSets
                        lLastDSN = Math.Max(lLastDSN, lDataSet.Attributes.GetValue("ID"))
                    Next
                    While lLastDSN >= lNextDestinationDSN
                        lNextDestinationDSN += 10
                    End While
                End If
            End If
        End If

        Dim lDateFormat As New atcUtility.atcDateFormat()
        With lDateFormat
            .DateOrder = atcDateFormat.DateOrderEnum.YearMonthDay
            .IncludeMinutes = False
            .DateSeparator = "-"
            .DateTimeSeparator = "T"
        End With

        Using lOutsideLevel As New ProgressLevel(, (aCells.Count > 1))

            'TODO: collect adjacent cells into one request
            Dim lCellIndex As Integer = -1
            For Each lCell As NLDASGridCoords In aCells
                lCellIndex += 1

                Logger.Progress("Getting NLDAS " & aDataType & " for " & lCell.ToString, lCellIndex, aCells.Count)

                Dim lX As String = Format(lCell.X, "000")
                Dim lY As String = Format(lCell.Y, "000")
                Try
                    Dim lFilenameBase As String = aDataType & ".X" & lX & ".Y" & lY
                    Dim lCacheFilename As String = IO.Path.Combine(lCacheFolder, lFilenameBase)

                    Dim lStartDateString As String = lDateFormat.JDateToString(aStartDate.ToOADate) ' .Year & "-" & aStartDate.Month & "-" & aStartDate.Day & "T" & aStartDate.Hour
                    Dim lEndDateString As String = lDateFormat.JDateToString(aEndDate.ToOADate) ' .Year & "-" & aStartDate.Month & "-" & aStartDate.Day & "T" & aStartDate.Hour

                    If aStartDate > pFirstAvailableDate OrElse aEndDate < lDefaultEndDate Then
                        lCacheFilename &= "_" & lStartDateString _
                                       & "to" & lEndDateString
                    End If
                    lCacheFilename &= ".nldas.txt"

                    'TODO: find data we want and have already retrieved for any overlapping period
                    'Dim lExistingCacheFilenames() As String = IO.Directory.GetFiles(lCacheFolder, lFilenameBase & "*")
                    'Array.Sort(lExistingCacheFilenames)

                    If aProject.GetEvenIfCached AndAlso IO.File.Exists(lCacheFilename) Then TryDelete(lCacheFilename)

                    Dim lGDS As atcTimeseriesGDS.atcTimeseriesGDS = Nothing

                    If IO.File.Exists(lCacheFilename) Then
                        'TODO: open cached data and then request data outside the date range we have already cached
                        'If IO.File.GetLastWriteTime(lCacheFilename).AddDays(7) > Now Then
                        'End If

                        lGDS = New atcTimeseriesGDS.atcTimeseriesGDS
                        If lGDS.Open(lCacheFilename) Then
                            Logger.Dbg("Using cached '" & lCacheFilename & "'")
                        Else
                            lGDS = Nothing
                            Logger.Dbg("Unable to open cached file '" & lCacheFilename & "' as timeseries so deleting to retry download.")
                            TryDelete(lCacheFilename)
                            TryDelete(lCacheFilename & ".xml")
                        End If
                    End If

                    If Not IO.File.Exists(lCacheFilename) Then
                        Using lLevel As New ProgressLevel(True)
                            Dim lURL As String = "http://hydro1.sci.gsfc.nasa.gov/daac-bin/access/timeseries.cgi?variable=NLDAS:NLDAS_FORA0125_H.002:" & aDataType
                            If aDataType = "EVPsfc" Then
                                lURL = "http://hydro1.sci.gsfc.nasa.gov/daac-bin/access/timeseries.cgi?variable=NLDAS:NLDAS_NOAH0125_H.002:" & aDataType
                            End If
                            If aStartDate > pFirstAvailableDate Then
                                lURL &= "&startDate=" & lStartDateString
                            End If
                            If aEndDate < lDefaultEndDate Then
                                lURL &= "&endDate=" & lEndDateString
                            End If
                            lURL &= "&location=NLDAS:X" & lX & "-Y" & lY & "&type=asc2"
                            D4EM.Data.Download.DownloadURL(lURL, lCacheFilename)
                        End Using
                    End If

                    If lWDM IsNot Nothing Then
                        If lGDS Is Nothing Then
                            If IO.File.Exists(lCacheFilename) Then
                                lGDS = New atcTimeseriesGDS.atcTimeseriesGDS
                                If Not lGDS.Open(lCacheFilename) Then
                                    lGDS = Nothing
                                    Logger.Dbg("Unable to open '" & lCacheFilename & "' as timeseries so not adding data from it to WDM.")
                                End If
                            Else
                                'file does not exist, there was a problem (over water?)
                                Logger.Dbg(lCacheFilename & "' does not exist so not adding data from it to WDM.")
                            End If
                        End If
                        If lGDS IsNot Nothing Then
                            For Each lTimeseriesUnshifted As atcData.atcTimeseries In lGDS.DataSets
                                Dim lTimeseries As atcTimeseries = D4EM.Data.MetCmp.ShiftDates(lTimeseriesUnshifted, atcTimeUnit.TUHour, -1 * aTimeZoneShift)
                                If aDataType = "APCPsfc" Then
                                    Dim lInchesTimeseries As atcTimeseries = lTimeseries / 25.4
                                    With lInchesTimeseries.Attributes
                                        .SetValue("ID", lNextDestinationDSN)
                                        lNextDestinationDSN += 10
                                        .SetValue("Constituent", "PREC")
                                        .SetValue("Description", "Hourly Precip in Inches")
                                        .SetValue("Location", lCell.ToString())
                                        .SetValue("Scenario", "NLDAS")
                                        .SetValue("STANAM", "NLDAS Lat=" & .GetValue("Latitude") & " Long=" & .GetValue("Longitude"))
                                        .SetValue("COMPFG", 1)
                                    End With
                                    If lWDM.AddDataSet(lInchesTimeseries, atcData.atcDataSource.EnumExistAction.ExistNoAction) Then
                                        'lWDMAddCount += 1
                                    Else
                                        Logger.Dbg("AddDataset failed when adding NLDAS " & lTimeseries.ToString)
                                    End If
                                Else

                                    'find base dsn to place the other met data appropriately
                                    Dim lBaseDsn As Integer = 1
                                    If lWDM IsNot Nothing Then
                                        If lWDM.DataSets.Count > 0 Then
                                            For Each lDataSet As atcData.atcDataSet In lWDM.DataSets
                                                If lDataSet.Attributes.GetValue("Location") = lCell.ToString() And lDataSet.Attributes.GetValue("Constituent") = "PREC" And lDataSet.Attributes.GetValue("Scenario") = "NLDAS" Then
                                                    lBaseDsn = lDataSet.Attributes.GetValue("ID")
                                                    Exit For
                                                End If
                                            Next
                                        End If
                                    End If

                                    'set the attributes of the new timeseries
                                    Dim lNewDsn As Integer = lBaseDsn
                                    Dim lCons As String = ""
                                    Dim lDesc As String = ""
                                    Dim lConvertedTimeseries As atcTimeseries = lTimeseries
                                    If aDataType = "PEVAPsfc" Or aDataType = "EVPsfc" Then
                                        lNewDsn = lBaseDsn + 5
                                        lCons = "PEVT"
                                        lDesc = "Hourly Potential Evapotranspiration in Inches"
                                        lConvertedTimeseries = lTimeseries / 25.4
                                    ElseIf aDataType = "TMP2m" Then
                                        lNewDsn = lBaseDsn + 2
                                        lCons = "ATEM"
                                        lDesc = "Hourly Air Temperature in Degrees F"
                                        lConvertedTimeseries = (lTimeseries * 9 / 5) - 459.67
                                    ElseIf aDataType = "UGRD10m" Then
                                        lNewDsn = lBaseDsn + 9 'use 3 for actual wind timeseries computed from windu and windv
                                        lCons = "WINDU"
                                        lDesc = "Hourly Zonal Wind in m/s"
                                        lConvertedTimeseries = lTimeseries.Clone '* 2.237 for mph
                                    ElseIf aDataType = "VGRD10m" Then
                                        lNewDsn = lBaseDsn + 8
                                        lCons = "WINDV"
                                        lDesc = "Hourly Meridional Wind in m/s"
                                        lConvertedTimeseries = lTimeseries.Clone '* 2.237 for mph
                                    ElseIf aDataType = "DSWRFsfc" Then
                                        lNewDsn = lBaseDsn + 4
                                        lCons = "SOLR"
                                        lDesc = "Hourly Solar Radiation in Langleys"
                                        lConvertedTimeseries = lTimeseries * 0.085985 '1 Watt/m2 = 0.085985 Lang/hour
                                        'now write the new timeseries to wdm
                                        With lConvertedTimeseries.Attributes
                                            .SetValue("ID", lNewDsn)
                                            .SetValue("Constituent", lCons)
                                            .SetValue("Description", lDesc)
                                            .SetValue("Location", lCell.ToString())
                                            .SetValue("Scenario", "NLDAS")
                                            .SetValue("STANAM", "NLDAS Lat=" & .GetValue("Latitude") & " Long=" & .GetValue("Longitude"))
                                            .SetValue("COMPFG", 1)
                                        End With
                                        If Not lWDM.AddDataSet(lConvertedTimeseries, atcData.atcDataSource.EnumExistAction.ExistRenumber) Then
                                            Logger.Dbg("AddDataset failed when adding NLDAS " & lTimeseries.ToString)
                                        End If
                                        'also use for cloud cover
                                        lNewDsn = lBaseDsn + 7
                                        lCons = "CLOU"
                                        lDesc = "Hourly Cloud Cover"
                                        'lConvertedTimeseries = D4EM.Data.MetCmp.NLDASCloudCoverTimeseriesFromSolar(lTimeseries, lWDM)
                                        'another alternative for cloud cover:
                                        Dim lDailyTimeseries As atcTimeseries = Aggregate(lConvertedTimeseries, atcTimeUnit.TUDay, 1, atcTran.TranSumDiv, lWDM)
                                        Dim lDailyCCTimeseries As atcTimeseries = D4EM.Data.MetCmp.CloudCoverTimeseriesFromSolar(lDailyTimeseries, lWDM, lConvertedTimeseries.Attributes.GetValue("Latitude"))
                                        For lValueIndex As Integer = 1 To lConvertedTimeseries.numValues
                                            Dim lDayIndex = lDailyCCTimeseries.Dates.IndexOfValue(Int(lConvertedTimeseries.Dates.Value(lValueIndex)), True)
                                            If lDayIndex > 0 Then
                                                Dim lVal As Double = lDailyCCTimeseries.Value(lDayIndex)
                                                If lVal > 0 Then
                                                    lConvertedTimeseries.Value(lValueIndex) = lDailyCCTimeseries.Value(lDayIndex)
                                                Else
                                                    lConvertedTimeseries.Value(lValueIndex) = 10.0
                                                End If
                                            Else
                                                lConvertedTimeseries.Value(lValueIndex) = 0.0
                                            End If
                                        Next lValueIndex
                                        lConvertedTimeseries.Attributes.SetValue("TSTYPE", lCons)
                                    ElseIf aDataType = "SPFH2m" Then
                                        lNewDsn = lBaseDsn + 6
                                        lCons = "DEWP"
                                        lDesc = "Hourly Dew Point Temperature"
                                        'find ATEM
                                        Dim lATEMTimeseries As New atcTimeseries(lWDM)
                                        If lWDM IsNot Nothing Then
                                            If lWDM.DataSets.Count > 0 Then
                                                For Each lDataSet As atcData.atcDataSet In lWDM.DataSets
                                                    If lDataSet.Attributes.GetValue("Location") = lCell.ToString() And lDataSet.Attributes.GetValue("Constituent") = "ATEM" And lDataSet.Attributes.GetValue("Scenario") = "NLDAS" Then
                                                        lATEMTimeseries = lDataSet
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                        End If
                                        lConvertedTimeseries = D4EM.Data.MetCmp.NLDASDewpointTimeseriesFromSpecificHumidity(lTimeseries, lATEMTimeseries, lWDM)
                                    End If

                                    'now write the new timeseries to wdm
                                    With lConvertedTimeseries.Attributes
                                        .SetValue("ID", lNewDsn)
                                        .SetValue("Constituent", lCons)
                                        .SetValue("Description", lDesc)
                                        .SetValue("Location", lCell.ToString())
                                        .SetValue("Scenario", "NLDAS")
                                        .SetValue("STANAM", "NLDAS Lat=" & .GetValue("Latitude") & " Long=" & .GetValue("Longitude"))
                                        .SetValue("COMPFG", 1)
                                    End With
                                    If Not lWDM.AddDataSet(lConvertedTimeseries, atcData.atcDataSource.EnumExistAction.ExistRenumber) Then
                                        Logger.Dbg("AddDataset failed when adding NLDAS " & lTimeseries.ToString)
                                    End If

                                    If aDataType = "VGRD10m" Then
                                        'if we have both VGRD10m and UGRD10m, compute WIND
                                        'find UGRD10m
                                        Dim lVWINDTimeseries = lConvertedTimeseries
                                        Dim lUWINDTimeseries As New atcTimeseries(lWDM)
                                        If lWDM IsNot Nothing Then
                                            If lWDM.DataSets.Count > 0 Then
                                                For Each lDataSet As atcData.atcDataSet In lWDM.DataSets
                                                    If lDataSet.Attributes.GetValue("Location") = lCell.ToString() And lDataSet.Attributes.GetValue("Constituent") = "WINDU" And lDataSet.Attributes.GetValue("Scenario") = "NLDAS" Then
                                                        lUWINDTimeseries = lDataSet
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                        End If
                                        For lValueIndex As Integer = 1 To lVWINDTimeseries.numValues
                                            lConvertedTimeseries.Value(lValueIndex) = (((lVWINDTimeseries.Value(lValueIndex) * lVWINDTimeseries.Value(lValueIndex)) + (lUWINDTimeseries.Value(lValueIndex) * lUWINDTimeseries.Value(lValueIndex))) ^ (0.5)) * 2.237
                                        Next lValueIndex
                                        'now write the new timeseries to wdm
                                        With lConvertedTimeseries.Attributes
                                            .SetValue("ID", lBaseDsn + 3)
                                            .SetValue("Constituent", "WIND")
                                            .SetValue("Description", "Hourly Wind Speed in mph")
                                            .SetValue("Location", lCell.ToString())
                                            .SetValue("Scenario", "NLDAS")
                                            .SetValue("STANAM", "NLDAS Lat=" & .GetValue("Latitude") & " Long=" & .GetValue("Longitude"))
                                            .SetValue("COMPFG", 1)
                                        End With
                                        If Not lWDM.AddDataSet(lConvertedTimeseries, atcData.atcDataSource.EnumExistAction.ExistRenumber) Then
                                            Logger.Dbg("AddDataset failed when adding NLDAS " & lTimeseries.ToString)
                                        End If
                                    End If

                                End If
                            Next
                        End If
                    ElseIf Not aProject.CacheOnly Then
                        If FileExists(lCacheFilename) Then
                            Dim lProjectGDS As atcTimeseriesGDS.atcTimeseriesGDS = Nothing
                            Dim lProjectGDS_Opened As Boolean = False
                            If aProject.Region IsNot Nothing Then
                                'TODO: better test for whether caller wants us to open this file and add to aProject.TimeseriesSources, or integrate aProject.TimeseriesSources with atcDataManager.DataSources
                                lProjectGDS = New atcTimeseriesGDS.atcTimeseriesGDS
                            End If
                            If String.IsNullOrEmpty(lSaveIn) Then 'No destination to save in, add data directly from cache
                                lResults &= "<add_data type='NASA NLDAS'>" & lCacheFilename & "</add_data>" & vbCrLf
                                If lProjectGDS IsNot Nothing Then lProjectGDS_Opened = lProjectGDS.Open(lCacheFilename)
                            Else
                                Dim lSaveFileName As String = IO.Path.Combine(lSaveIn, IO.Path.GetFileName(lCacheFilename))
                                If TryCopy(lCacheFilename, lSaveFileName) Then
                                    TryCopy(lCacheFilename & ".xml", lSaveFileName & ".xml")
                                    lResults &= "<add_data type='NASA NLDAS'>" & lSaveFileName & "</add_data>" & vbCrLf
                                    If lProjectGDS IsNot Nothing Then lProjectGDS_Opened = lProjectGDS.Open(lSaveFileName)
                                Else 'Could not copy to destination, add data directly from cache
                                    lResults &= "<add_data type='NASA NLDAS'>" & lCacheFilename & "</add_data>" & vbCrLf
                                    If lProjectGDS IsNot Nothing Then lProjectGDS_Opened = lProjectGDS.Open(lCacheFilename)
                                End If
                            End If
                            If lProjectGDS_Opened Then
                                aProject.TimeseriesSources.Add(lProjectGDS)
                            End If
                        Else
                            lResults = "<error>Failed to retrieve " & IO.Path.GetFileName(lCacheFilename) & "</error>"
                        End If
                    End If

                Catch e As Exception
                    Return "<error>Error getting data for NLDAS cell " & lCell.ToString & vbCrLf & e.ToString & "</error>"
                End Try
            Next
        End Using
        Return lResults
    End Function

    'Private Shared Function GDS_URL(ByVal aBaseURL As String, ByVal aDataType As String,
    '                         ByVal aFirstHour As Integer, ByVal aLastHour As Integer,
    '                         ByVal aCell As NLDASGridCoords) As String
    '    'http://hydro1.sci.gsfc.nasa.gov/dods_ts1/NLDAS_FORA0125_H.002.APCPsfc.Y200.ascii?apcpsfc[0:276082][0:0][300:300]
    '    Return aBaseURL & ".ascii?" _
    '                    & aDataType _
    '                    & "[" & aFirstHour & ":" & aLastHour & "]" _
    '                    & "[0:0]" _
    '                    & "[" & aCell.X & ":" & aCell.X & "]"
    'End Function

    'Private Shared Function NumTimeSteps(ByVal aDDS As String) As Integer
    '    Dim lTimeIndex As Integer = aDDS.IndexOf("[time = ")
    '    If lTimeIndex > 0 Then
    '        lTimeIndex += 8
    '        Dim lTimeEnd As Integer = aDDS.IndexOf("]", lTimeIndex)
    '        If lTimeEnd > 0 Then
    '            Return Integer.Parse(aDDS.Substring(lTimeIndex, lTimeEnd - lTimeIndex))
    '        End If
    '    End If
    '    Return 0
    'End Function
End Class
